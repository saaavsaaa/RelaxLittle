public class GenerateIdUtil {

    final static int[] sizeTable = { 9, 99, 999, 9999, 99999, 999999, 9999999,
            99999999, 999999999, Integer.MAX_VALUE };
    private static AtomicInteger _increment = new AtomicInteger(0);

    public synchronized static long getNewId(){
        long tick = System.nanoTime();
        int machine = getMachineHash();
        int sequence =_increment.getAndIncrement();
        return calculate(tick, machine, sequence);
    }

    private static long calculate(final long tick, final int machine, final int sequence){
        long result = sequence;
        result += machine * sizeOfInt(sequence);
        result += tick * sizeOfInt(machine) * sizeOfInt(sequence);
        return result;
    }

    private static int getMachineHash()
    {
        String hostName = getHostName();
        return hostName.hashCode();
    }

    private static String getHostName(){
        InetAddress addr=null;
        String address="";
        try{
            addr=InetAddress.getLocalHost();
            address=addr.getHostName().toString();//获得本机名称
        }catch(Exception e){
            LogMgr.writeErrorLog("path:com.kyj.kjf.common.util,case:get the host name error", e);
            return "godknow";
        }
        return address;
    }

    private static int sizeOfInt(int x) {
        for (int i = 0;; i++)
            if (x <= sizeTable[i]) {
                return i + 1;
            }
    }
}
